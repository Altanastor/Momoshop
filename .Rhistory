),
mainPanel(
imageOutput("img", width="20%"),
imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval"),
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
# browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
# Minimal example of Shiny widget using 'magick' images
ui <- fluidPage(
titlePanel("Magick Shiny Demo"),
sidebarLayout(
sidebarPanel(
fileInput("upload", "Upload", accept = c('image/png', 'image/jpeg')),
sliderInput("rotation", "Rotation", 0, 360, 0)
),
mainPanel(
imageOutput("img", width="20%"),
imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval"),
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Magick Shiny Demo"),
sidebarLayout(
sidebarPanel(
fileInput("upload", "Upload", accept = c('image/png', 'image/jpeg')),
sliderInput("rotation", "Rotation", 0, 360, 0)
),
mainPanel(
imageOutput("img", width="20%"),
imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval")
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
pipe()
tmpfile3
list(src = tmpfile3, contentType = "image/jpeg")
# Minimal example of Shiny widget using 'magick' images
ui <- fluidPage(
titlePanel("Magick Shiny Demo"),
sidebarLayout(
sidebarPanel(
fileInput("upload", "Upload", accept = c('image/png', 'image/jpeg')),
sliderInput("rotation", "Rotation", 0, 360, 0)
),
mainPanel(
imageOutput("img", width="20%"),
imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval")
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
list(src = tmpfile3, contentType = "image/jpeg")
pipe()
# Minimal example of Shiny widget using 'magick' images
ui <- fluidPage(
titlePanel("Magick Shiny Demo"),
sidebarLayout(
sidebarPanel(
fileInput("upload", "Upload", accept = c('image/png', 'image/jpeg')),
sliderInput("rotation", "Rotation", 0, 360, 0)
),
mainPanel(
imageOutput("img", width="20%"),
# imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval")
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='.jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
list(src = tmpfile3, contentType = "image/jpeg")
# Minimal example of Shiny widget using 'magick' images
ui <- fluidPage(
titlePanel("Magick Shiny Demo"),
sidebarLayout(
sidebarPanel(
fileInput("upload", "Upload", accept = c('image/png', 'image/jpeg')),
sliderInput("rotation", "Rotation", 0, 360, 0)
),
mainPanel(
imageOutput("img", width="20%"),
# imageOutput("img2", width="20%"),
#imageOutput("img", width="10%"),
verbatimTextOutput("pipe_cat"),
imageOutput("pipe_eval")
)
)
)
server <- function(input, output, session) {
library(magick)
# Start with placeholder img
image <- image_read("https://raw.githubusercontent.com/ThinkR-open/collage/master/inst/tigrou/tigrou.jpg")
# When uploading new image
observeEvent(input$upload, {
if (length(input$upload$datapath))
image <<- image_convert(image_read(input$upload$datapath), "jpeg")
})
# A plot of fixed size
output$img <- renderImage({
tmpfile <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile, contentType = "image/jpeg")
})
# A plot of fixed size
output$img2 <- renderImage({
tmpfile2 <- image %>%
image_rotate(input$rotation) %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg')
# Return a list
list(src = tmpfile2, contentType = "image/jpeg")
})
pipe <- reactive({
pipe <- c("image %>% ")
if (input$rotation != 0)
pipe <- c(pipe, paste0("image_rotate(", input$rotation, ") %>% "))
pipe <- c(pipe, "image_write(tempfile(fileext='.jpg'), format = 'jpg')")
pipe
})
output$pipe_cat <- renderPrint(
pipe() %>%
paste(collapse="\n    ") %>%
gsub("%>% *$", "", .) %>%
cat
)
output$pipe_eval <- renderImage({
tmpfile3 <- pipe() %>%
paste(collapse=" ") %>%
gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
# browser()
list(src = tmpfile3, contentType = "image/jpeg")
})
}
shinyApp(ui, server)
library(shiny); runApp('WORKING_MF.R')
bind_db((Momocs))
library(Momocs)
library(shiny); runApp('demo.R')
... <- "yo"
...
x <- list("yo", iris$Species[2], "yop")
x
x %>% unlist %>% paste0
x %>% unlist %>% paste0(collapse="")
x %>% unlist %>% paste0(collapse=" ")
runApp('demo.R')
runApp('demo.R')
pipe <- "image %>%"
pipe %>% pipe_append("yo")
pipe_append <- function(pipe, ...){
... %>% list %>%
unlist %>% paste0(collapse=" ") %>%
append(pipe, .)
}
pipe_cond_append <- function(pipe, cond, ...){
if (cond)
pipe_append(pipe, ...)
else
pipe
}
pipe <- "image %>%"
pipe %>% pipe_append("yo")
pipe_append <- function(pipe, ...){
list(...) %>%
unlist %>% paste0(collapse=" ") %>%
append(pipe, .)
}
pipe_cond_append <- function(pipe, cond, ...){
if (cond)
pipe_append(pipe, ...)
else
pipe
}
pipe <- "image %>%"
pipe %>% pipe_append("yo")
pipe_append <- function(pipe, ...){
list(...) %>%
unlist %>% paste0(collapse=" ") %>%
append(pipe, ., "%>%")
}
pipe_cond_append <- function(pipe, cond, ...){
if (cond)
pipe_append(pipe, ...)
else
pipe
}
pipe <- "image %>%"
pipe %>% pipe_append("yo")
pipe_append <- function(pipe, ...){
list(...) %>%
unlist %>% paste0(., "%>%", collapse=" ") %>%
append(pipe, .)
}
pipe_cond_append <- function(pipe, cond, ...){
if (cond)
pipe_append(pipe, ...)
else
pipe
}
pipe <- "image %>%"
pipe %>% pipe_append("yo")
pipe_append <- function(pipe, ...){
list(...) %>%
unlist %>% paste0(., " %>%", collapse=" ") %>%
append(pipe, .)
}
pipe_cond_append <- function(pipe, cond, ...){
if (cond)
pipe_append(pipe, ...)
else
pipe
}
pipe <- "image %>%"
runApp('demo.R')
shinyFilesExample()
library(Momocs)
?bezier()
set.seed(34)
x <- coo_sample(efourier_shape(), 5)
plot(x, ylim=c(-3, 3), asp=1, type='b', pch=20)
b <- bezier(x)
bi <- bezier_i(b$B)
lines(bi, col='red')
set.seed(34)
x <- coo_sample(efourier_shape(), 5)
plot(x, ylim=c(-3, 3), asp=1, type='b', pch=20)
b <- bezier(x)
bi <- bezier_i(b$B)
lines(bi, col='red')
?spline()
require(graphics)
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = 0.1+c(3,3,3,1))
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
dev.off()
require(graphics)
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
library(magick)
"/var/folders/71/xqm_5j310_j1jg6mfb5xlr_w0000gn/T//Rtmp0tZs5Z/9e6f5e2487fc5a807edea403/0.png"
"/var/folders/71/xqm_5j310_j1jg6mfb5xlr_w0000gn/T//Rtmp0tZs5Z/9e6f5e2487fc5a807edea403/0.png" %>% image_read
"/var/folders/71/xqm_5j310_j1jg6mfb5xlr_w0000gn/T//Rtmp0tZs5Z/5b4639601c028cd8aa302169/0.png" %>% image_read
dev.off()
"/var/folders/71/xqm_5j310_j1jg6mfb5xlr_w0000gn/T//Rtmp0tZs5Z/5b4639601c028cd8aa302169/0.png" %>% image_read
