# Files tab
tabItem(tabName = "files",
h2("Files"),
# Button to pick a folder
shinyDirButton('directory', 'Folder select', 'Select the folder containing images'),
# Current file
h3("Current file:"),
verbatimTextOutput("active_file"),
br(),
# Button to navigate files
actionButton("minus", icon("chevron-left")),
actionButton("plus",  icon("chevron-right")),
# Display selected folder
textOutput("dir"),
DTOutput("lf")
),
# More tab
tabItem(tabName = "more",
h2("...")
)
)
)
# Put them together into a dashboardPage
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Momoshop"),
ui_sidebar,
ui_body
)
#
# ui <- dashboardPage(
#   skin = "black",
#   # dashboardHeader(title=tags$img(src='Momoshop_sticker.png', height="40px", align="left")),
#   dashboardHeader(title="Momoshop"),
#   dashboardSidebar(
#     sidebarMenu(
#       menuItem("Files", tabName = "files", icon = icon("picture", lib="glyphicon")),
#       menuItem("Retouching", tabName = "retouch", icon = icon("eye-open", lib="glyphicon"))
#     ),
#     # File handling ----------------------------------------
#     fileInput("upload", "New image", accept = c('image/png', 'image/jpeg')),
#     actionButton("reload", "Reload", icon=icon("refresh", lib="glyphicon")),
#     # actionButton("write", "Write", icon=icon("floppy-o")),
#     # Post production using magick =========================
#     sidebarMenu(
#       id = "tabs",
#       # Channels and thresholding --------------------------
#       menuItem("Channels and threshold", icon = icon("menu-hamburger", lib="glyphicon"),
#                selectInput("channel", "Channels", choices = useful_channels, selected = "All channels"),
#                sliderInput("threshold", "Threshold", -1, 256, -1)),
#       # Colors ---------------------------------------------
#       menuItem("Colors", icon = icon("cog", lib="glyphicon"),
#                sliderInput("brightness", "Brightness", 0, 200, 100, 1),
#                sliderInput("saturation", "Saturation", 0, 200, 100, 1),
#                sliderInput("hue", "Hue", 0, 200, 100, 1)
#       ),
#       # Transform ---------------------------------------------
#       menuItem("Transform", icon = icon("wrench", lib="glyphicon"),
#                # sliderInput("height", "Rescale", min=1, value = 1, max = 1, step = 1),
#                sliderInput("rotation", "Rotate", 0, 360, 0, step = 1, round=TRUE),
#                sliderInput("reducenoise", "Denoise", 0, 50, 0),
#                checkboxGroupInput("effects", "Effects",
#                                   choices = list("negate", "flip", "flop"))
#       )
#     )
#   ),
#   dashboardBody(
#     # If an image is loaded, then output some info
#     fluidRow(
#       column(width = 6,
#              h3("Original image"),
#              imageOutput("img", width="50%", height="50%")
#       ),
#       column(width = 6,
#              h3("Edited image"),
#              imageOutput("img2", width="50%", height="50%"))
#     ),
#
#     fluidRow(
#       column(12,
#              h3("Debug"),
#              # h4("Histogram"),
#              plotOutput("histogram"),
#              h4("info"),
#              verbatimTextOutput("info"),
#              h4("upload"),
#              verbatimTextOutput("upload"),
#              h4("pipe_cat"),
#              verbatimTextOutput("pipe_cat"),
#              h4("env"),
#              verbatimTextOutput("env"),
#              h4("show_inputs"),
#              tableOutput('show_inputs')
#       )
#     )
#   )
# )
##### Server ===============================================
server <- function(input, output, session) {
pipe <- "" # to trigger pipe and downstream reactives
# Pipe construction --------------------------------------
# build a reactive pipe
pipe <- reactive({
"image %>% " %>%
pipe_cond_append("negate" %in% input$effects,
"image_negate() %>%") %>%
pipe_cond_append("flip" %in% input$effects,
"image_flip() %>%") %>%
pipe_cond_append("flop" %in% input$effects,
"image_flop() %>%") %>%
pipe_cond_append(input$channel != "All channels",
"image_channel('", input$channel, "') %>%") %>%
pipe_cond_append(input$threshold>-1,
"image_threshold(", input$threshold, ") %>%") %>%
pipe_cond_append(input$reducenoise>0,
"image_reducenoise(", input$reducenoise, ") %>% ") %>%
pipe_cond_append(input$rotation!=0,
"image_rotate(", input$rotation, ") %>% ") %>%
pipe_cond_append(any(c(input$brightness,input$saturation, input$hue)!=100),
"image_modulate(", input$brightness, ",", input$saturation, ",", input$hue, ") %>%") #%>%
# pipe_cond_append(input$height != info$height,
# "image_resize('", paste(input$height, round(info$width*(input$height/info$height)), sep="x"), "') %>% ")
})
output$pipe_cat <- renderPrint(
pipe() %>% pipe_cat()
)
# Image uploading ----------------------------------------
# Start with placeholder img
image <- image_read("www/empty.png")
# reset values when reload
reset_values <- function(){
updateCheckboxGroupInput(session, "effects", selected = "")
updateSliderInput(session, "height", value = info$height, max=info$height*2)
updateSelectInput(session, "channel", selected="All channels")
updateSliderInput(session, "rotation", value = 0)
updateSliderInput(session, "brightness", value = 100)
updateSliderInput(session, "saturation", value = 100)
updateSliderInput(session, "hue", value = 100)
updateCheckboxGroupInput(session, "effects", choices=NULL)
updateSliderInput(session, "threshold", value=-1)
updateSliderInput(session, "reducenoise", value=0)
}
globalize_when_new_image <- function(){
if (length(input$upload$datapath)>0){
path <<- input$upload$datapath
image <<- image_read(path)
info <<- image_info(image)
}
}
# Uploading an image
observeEvent(input$upload, {
globalize_when_new_image()
reset_values()
updateSliderInput(session, "height", min=1, value = info$height, max = info$height*2)
})
# Reloading an image
observeEvent(input$upload, {
globalize_when_new_image()
reset_values()
# updateSliderInput(session, "height", min=1, value = info$height, max = info$height*2)
})
# Image info ----------------------------------------
output$info <- renderText({
if (length(input$upload$datapath)){
paste("Original image: ",
info$format,
info$colorspace,
"-",
paste0("(", format(structure(info$filesize, class="object_size"), units="auto"), ")"),
paste(info$width, info$height, sep=" x "))
} else {
"No image loaded"
}
})
output$upload <- renderPrint(input$upload)
# output$histogram <- renderPlot({
#   pipe() %>%
#     paste(collapse=" ") %>%
#     gsub("%>% *$", "", .) %>%
#     parse(text=.) %>%
#     eval() %>%
#     image_histogram()
# })
# Image rendering --------------
# original image
output$img <- renderImage({
if (length(input$upload$datapath)==0){
image <- image_read("www/empty.png")
}
image %>%
image_convert("jpeg") %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg') -> tmpfile
list(src = tmpfile, contentType = "image/jpeg")
})
# output$img2 <- renderImage({
#   tmpfile2 <- pipe() %>%
#     pipe_append("image_write(tempfile(fileext='.jpg'), format = 'jpg')") %>%
#     paste(collapse=" ") %>%
#     # gsub("%>% *$", "", .) %>%
#     parse(text=.) %>%
#     eval()
#   # browser()
#   list(src = tmpfile2, contentType = "image/jpeg")
# })
edited <- reactive({
tmpfile2 <- pipe() %>%
pipe_append("image_write(tempfile(fileext='.jpg'), format = 'jpg')") %>%
paste(collapse=" ") %>%
# gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
# browser()
list(src = tmpfile2, contentType = "image/jpeg")
})
output$img2 <- renderImage({
edited()
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp('file_selector.R')
runApp()
?tabItems
?tabItem()
runApp()
?menuSubItem
runApp()
runApp()
runApp()
runApp()
runApp()
ui_sidebar <- dashboardSidebar(
sidebarMenu(
id="tabs",
menuItem("Files",  tabName = "files", icon = icon("picture", lib="glyphicon")),
menuItem("Retouching", tabName = "lab", icon = icon("eye-open", lib="glyphicon"),
# Channels and thresholding --------------------------
menuItem(text = "Channels and threshold", tabName = "channels",
icon = icon("menu-hamburger", lib="glyphicon"),
selectInput("channel", "Channels", choices = useful_channels, selected = "All channels"),
sliderInput("threshold", "Threshold", -1, 256, -1)),
# Colors ---------------------------------------------
menuItem(text = "Colors", tabName = "colors",
icon = icon("cog", lib="glyphicon"),
sliderInput("brightness", "Brightness", 0, 200, 100, 1),
sliderInput("saturation", "Saturation", 0, 200, 100, 1),
sliderInput("hue", "Hue", 0, 200, 100, 1)
),
# Transform ---------------------------------------------
menuItem(text = "Transform", tabName = "transform",
icon = icon("wrench", lib="glyphicon"),
# sliderInput("height", "Rescale", min=1, value = 1, max = 1, step = 1),
sliderInput("rotation", "Rotate", 0, 360, 0, step = 1, round=TRUE),
sliderInput("reducenoise", "Denoise", 0, 50, 0),
checkboxGroupInput("effects", "Effects",
choices = list("negate", "flip", "flop")))
)
)
)
ui_body <- dashboardBody(
tabItems(
tabItem("files",
p("yoooo"),
textOutput("res")),
tabItem("lab",
p("yeeeep")),
tabItem("channels",
p("yeeeep_channels"))
)
)
runApp()
?sidebarMenu()
ui_sidebar <- dashboardSidebar(
sidebarMenu(
id="tabs",
menuItem("Files",  tabName = "files", icon = icon("picture", lib="glyphicon")),
menuItem("Retouching", tabName = "lab", icon = icon("eye-open", lib="glyphicon"))))
ui_body <- dashboardBody(
tabItems(
tabItem("files",
p("yoooo"),
textOutput("res")),
tabItem("lab",
p("yeeeep")),
tabItem("channels",
p("yeeeep_channels"))
)
)
ui <- dashboardPage(
skin = "black",
dashboardHeader(title = "Momoshop"),
ui_sidebar,
ui_body
)
server <- function(input, output, session) {
output$res <- renderText({
paste("You've selected:", input$tabs)
})
pipe <- "" # to trigger pipe and downstream reactives
# Pipe construction --------------------------------------
# build a reactive pipe
pipe <- reactive({
"image %>% " %>%
pipe_cond_append("negate" %in% input$effects,
"image_negate() %>%") %>%
pipe_cond_append("flip" %in% input$effects,
"image_flip() %>%") %>%
pipe_cond_append("flop" %in% input$effects,
"image_flop() %>%") %>%
pipe_cond_append(input$channel != "All channels",
"image_channel('", input$channel, "') %>%") %>%
pipe_cond_append(input$threshold>-1,
"image_threshold(", input$threshold, ") %>%") %>%
pipe_cond_append(input$reducenoise>0,
"image_reducenoise(", input$reducenoise, ") %>% ") %>%
pipe_cond_append(input$rotation!=0,
"image_rotate(", input$rotation, ") %>% ") %>%
pipe_cond_append(any(c(input$brightness,input$saturation, input$hue)!=100),
"image_modulate(", input$brightness, ",", input$saturation, ",", input$hue, ") %>%") #%>%
# pipe_cond_append(input$height != info$height,
# "image_resize('", paste(input$height, round(info$width*(input$height/info$height)), sep="x"), "') %>% ")
})
output$pipe_cat <- renderPrint(
pipe() %>% pipe_cat()
)
# Image uploading ----------------------------------------
# Start with placeholder img
image <- image_read("www/empty.png")
# reset values when reload
reset_values <- function(){
updateCheckboxGroupInput(session, "effects", selected = "")
updateSliderInput(session, "height", value = info$height, max=info$height*2)
updateSelectInput(session, "channel", selected="All channels")
updateSliderInput(session, "rotation", value = 0)
updateSliderInput(session, "brightness", value = 100)
updateSliderInput(session, "saturation", value = 100)
updateSliderInput(session, "hue", value = 100)
updateCheckboxGroupInput(session, "effects", choices=NULL)
updateSliderInput(session, "threshold", value=-1)
updateSliderInput(session, "reducenoise", value=0)
}
globalize_when_new_image <- function(){
if (length(input$upload$datapath)>0){
path <<- input$upload$datapath
image <<- image_read(path)
info <<- image_info(image)
}
}
# Uploading an image
observeEvent(input$upload, {
globalize_when_new_image()
reset_values()
updateSliderInput(session, "height", min=1, value = info$height, max = info$height*2)
})
# Reloading an image
observeEvent(input$upload, {
globalize_when_new_image()
reset_values()
# updateSliderInput(session, "height", min=1, value = info$height, max = info$height*2)
})
# Image info ----------------------------------------
output$info <- renderText({
if (length(input$upload$datapath)){
paste("Original image: ",
info$format,
info$colorspace,
"-",
paste0("(", format(structure(info$filesize, class="object_size"), units="auto"), ")"),
paste(info$width, info$height, sep=" x "))
} else {
"No image loaded"
}
})
output$upload <- renderPrint(input$upload)
# output$histogram <- renderPlot({
#   pipe() %>%
#     paste(collapse=" ") %>%
#     gsub("%>% *$", "", .) %>%
#     parse(text=.) %>%
#     eval() %>%
#     image_histogram()
# })
# Image rendering --------------
# original image
output$img <- renderImage({
if (length(input$upload$datapath)==0){
image <- image_read("www/empty.png")
}
image %>%
image_convert("jpeg") %>%
image_write(tempfile(fileext='.jpg'), format = 'jpg') -> tmpfile
list(src = tmpfile, contentType = "image/jpeg")
})
# output$img2 <- renderImage({
#   tmpfile2 <- pipe() %>%
#     pipe_append("image_write(tempfile(fileext='.jpg'), format = 'jpg')") %>%
#     paste(collapse=" ") %>%
#     # gsub("%>% *$", "", .) %>%
#     parse(text=.) %>%
#     eval()
#   # browser()
#   list(src = tmpfile2, contentType = "image/jpeg")
# })
edited <- reactive({
tmpfile2 <- pipe() %>%
pipe_append("image_write(tempfile(fileext='.jpg'), format = 'jpg')") %>%
paste(collapse=" ") %>%
# gsub("%>% *$", "", .) %>%
parse(text=.) %>%
eval()
# browser()
list(src = tmpfile2, contentType = "image/jpeg")
})
output$img2 <- renderImage({
edited()
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"), startExpanded = TRUE,
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
req(input$sidebarItemExpanded)
paste("Expanded menuItem:", input$sidebarItemExpanded)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"), startExpanded = TRUE,
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
),
menuItem("Charts2", icon = icon("bar-chart-o"), startExpanded = TRUE,
menuSubItem("Sub-item 1", tabName = "subitema"),
menuSubItem("Sub-item 2", tabName = "subitemb")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content"),
tabItem("subitema", "Sub-item 1 tab content"),
tabItem("subitemb", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
req(input$sidebarItemExpanded)
paste("Expanded menuItem:", input$sidebarItemExpanded)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
